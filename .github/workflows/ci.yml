name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.13"]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Run tests
      run: pytest tests/ -v

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8
    
    - name: Run ruff
      run: ruff check .
    
    - name: Run flake8
      run: flake8 backend/ cli/ tests/ --max-line-length=88 --extend-ignore=E203,W503

  docker:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: ota-deploy-tracker:test
    
    - name: Test Docker image
      run: |
        echo "✅ Docker image built successfully"
        docker images ota-deploy-tracker:test

  kubectl-check:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install yamllint
      run: pip install yamllint
    
    - name: Validate YAML syntax
      run: |
        yamllint k8s/
    
    - name: Check Kubernetes manifests structure
      run: |
        echo "✅ Checking Kubernetes manifests..."
        for file in k8s/*.yaml; do
          echo "Checking $file"
          grep -q "apiVersion\|kind\|metadata" "$file" && echo "✅ $file has basic K8s structure" || echo "❌ $file missing K8s structure"
        done